syntax = "proto2";

// custom options need descriptor file
import "google/protobuf/descriptor.proto";

package me.lyh.protobuf.generic.proto;

option optimize_for = SPEED;

enum Color {
    BLACK = 0;
    WHITE = 1;
    GREEN = 2;
}

message Required {
    required double double_field = 1;
    required float float_field = 2;
    required int32 int32_field = 3;
    required int64 int64_field = 4;
    required uint32 uint32_field = 5;
    required uint64 uint64_field = 6;
    required sint32 sint32_field = 7;
    required sint64 sint64_field = 8;
    required fixed32 fixed32_field = 9;
    required fixed64 fixed64_field = 10;
    required sfixed32 sfixed32_field = 11;
    required sfixed64 sfixed64_field = 12;
    required bool bool_field = 13;
    required string string_field = 14;
    required bytes bytes_field = 15;
    required Color color_field = 16;
}

message Optional {
    optional double double_field = 1;
    optional float float_field = 2;
    optional int32 int32_field = 3;
    optional int64 int64_field = 4;
    optional uint32 uint32_field = 5;
    optional uint64 uint64_field = 6;
    optional sint32 sint32_field = 7;
    optional sint64 sint64_field = 8;
    optional fixed32 fixed32_field = 9;
    optional fixed64 fixed64_field = 10;
    optional sfixed32 sfixed32_field = 11;
    optional sfixed64 sfixed64_field = 12;
    optional bool bool_field = 13;
    optional string string_field = 14;
    optional bytes bytes_field = 15;
    optional Color color_field = 16;
}

message Repeated {
    repeated double double_field = 1;
    repeated float float_field = 2;
    repeated int32 int32_field = 3;
    repeated int64 int64_field = 4;
    repeated uint32 uint32_field = 5;
    repeated uint64 uint64_field = 6;
    repeated sint32 sint32_field = 7;
    repeated sint64 sint64_field = 8;
    repeated fixed32 fixed32_field = 9;
    repeated fixed64 fixed64_field = 10;
    repeated sfixed32 sfixed32_field = 11;
    repeated sfixed64 sfixed64_field = 12;
    repeated bool bool_field = 13;
    repeated string string_field = 14;
    repeated bytes bytes_field = 15;
    repeated Color color_field = 16;
}

message RepeatedPacked {
    repeated double double_field = 1 [packed=true];
    repeated float float_field = 2 [packed=true];
    repeated int32 int32_field = 3 [packed=true];
    repeated int64 int64_field = 4 [packed=true];
    repeated uint32 uint32_field = 5 [packed=true];
    repeated uint64 uint64_field = 6 [packed=true];
    repeated sint32 sint32_field = 7 [packed=true];
    repeated sint64 sint64_field = 8 [packed=true];
    repeated fixed32 fixed32_field = 9 [packed=true];
    repeated fixed64 fixed64_field = 10 [packed=true];
    repeated sfixed32 sfixed32_field = 11 [packed=true];
    repeated sfixed64 sfixed64_field = 12 [packed=true];
    repeated bool bool_field = 13 [packed=true];
    repeated Color color_field = 16 [packed=true];
}

message RepeatedUnpacked {
    repeated double double_field = 1 [packed=false];
    repeated float float_field = 2 [packed=false];
    repeated int32 int32_field = 3 [packed=false];
    repeated int64 int64_field = 4 [packed=false];
    repeated uint32 uint32_field = 5 [packed=false];
    repeated uint64 uint64_field = 6 [packed=false];
    repeated sint32 sint32_field = 7 [packed=false];
    repeated sint64 sint64_field = 8 [packed=false];
    repeated fixed32 fixed32_field = 9 [packed=false];
    repeated fixed64 fixed64_field = 10 [packed=false];
    repeated sfixed32 sfixed32_field = 11 [packed=false];
    repeated sfixed64 sfixed64_field = 12 [packed=false];
    repeated bool bool_field = 13 [packed=false];
    repeated Color color_field = 16 [packed=false];
}

message OneOf {
    oneof field {
        double double_field = 1;
        float float_field = 2;
        int32 int32_field = 3;
        int64 int64_field = 4;
        uint32 uint32_field = 5;
        uint64 uint64_field = 6;
        sint32 sint32_field = 7;
        sint64 sint64_field = 8;
        fixed32 fixed32_field = 9;
        fixed64 fixed64_field = 10;
        sfixed32 sfixed32_field = 11;
        sfixed64 sfixed64_field = 12;
        bool bool_field = 13;
        string string_field = 14;
        bytes bytes_field = 15;
        Color color_field = 16;
    }
}

message Mixed {
    required double double_field = 1;
    required string string_field = 2;
    required bytes bytes_field = 3;
    required Color color_field = 4;
    optional double double_field_o = 5;
    optional string string_field_o = 6;
    optional bytes bytes_field_o = 7;
    optional Color color_field_o = 8;
    repeated double double_field_r = 9;
    repeated string string_field_r = 10;
    repeated bytes bytes_field_r = 11;
    repeated Color color_field_r = 12;
}

message Nested {
    required double double_field = 1;
    optional double double_field_o = 2;
    repeated double double_field_r = 3;
    required Color color_field = 4;
    optional Color color_field_o = 5;
    repeated Color color_field_r = 6;
    required Mixed mixed_field = 7;
    optional Mixed mixed_field_o = 8;
    repeated Mixed mixed_field_r = 9;
}
// define custom options
extend google.protobuf.MessageOptions {
    optional int32 my_message_option = 50001;
}
extend google.protobuf.FieldOptions {
    optional float my_field_option = 50002;
    optional string my_field_option_str = 50003;

}
extend google.protobuf.EnumOptions {
    optional bool my_enum_option = 50004;
}
extend google.protobuf.EnumValueOptions {
    optional string my_enum_value_option = 50005;
}

enum STATE {
    option (my_enum_option) = true;
    START = 1 [(my_enum_value_option) = "Custom enum value option"];
    STOP = 2;
}

message CustomOptionMessage {
    option (my_message_option) = 1234;
    optional int32 foo = 1 [(my_field_option) = 4.5];
    optional string bar = 2 [(my_field_option_str) = "String field custom option"];
    optional STATE state = 3 [(my_field_option_str) = "Field custom option"];
}
